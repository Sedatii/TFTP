#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>

#define buf_size 516

void gettftpfunction(char *host, char *filename) {
	int sock;
	char service[NI_MAXSERV];
	char buffer[buf_size];
	char bufferbc[buf_size];
	ssize_t recv_len;
	
	struct addrinfo hints = {
        .ai_flags = 0,
        .ai_family = AF_INET,
        .ai_socktype = SOCK_DGRAM, 
        .ai_protocol = 0,
        .ai_addrlen = 0,
        .ai_addr = NULL,
        .ai_canonname = NULL,
		.ai_next = NULL
    };
	
	struct addrinfo *res;
	getaddrinfo(host, NULL, &hints, &res);
	
	sock = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sock == -1) {
		perror("socket error");
		exit(EXIT_FAILURE);
    }
    if (connect(sock, res->ai_addr, res->ai_addrlen) == -1) {
        perror("connect error");
        exit(EXIT_FAILURE);
    }
    
	printf("socket :%d \n", sock);
	getnameinfo(res->ai_addr, res->ai_addrlen, host, NI_MAXHOST, service, NI_MAXSERV, 
	NI_NUMERICHOST | NI_NUMERICSERV);
	printf("ip : %s \n", host);
	
	
	buffer[0] = 0;
	buffer[1] = 1;
	strcpy(buffer + 2, filename);
	strcpy(buffer + 2 + strlen(filename) + 1, "octet");
	sendto(sock, buffer, strlen(buffer) + 1, 0, res->ai_addr, res->ai_addrlen);
	
	FILE* file = fopen(filename, "wb");
	uint16_t block_num = 1;
	
	while (1) {
       recv_len = recvfrom(sock, bufferbc, sizeof(bufferbc), 0, res->ai_addr, &res->ai_addrlen);
        if (recv_len >= 4 && buffer[1] == 3) {
            uint16_t received_block_num = (bufferbc[2] << 8) | bufferbc[3];
			if (received_block_num == block_num) {
                // Write data to the file
                fwrite(buffer + 4, 1, recv_len - 4, file);
                bufferbc[0] = 0;
                bufferbc[1] = 4;  
                bufferbc[2] = (block_num >> 8) & 0xFF; 
                bufferbc[3] = block_num & 0xFF;        
                sendto(sock, bufferbc, 4, 0, res->ai_addr, res->ai_addrlen);

 
                if (recv_len < buf_size) {
                    break;
                }

                block_num++;
			}
		}
	}
	
	
    freeaddrinfo(res);
	close(sock);
}
